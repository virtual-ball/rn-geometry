var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = '/Users/meloMacPro/Desktop/ar/rn-geometry/node_modules/react-native-arkit/ARKit.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var _generateId = require('./components/lib/generateId');

var _generateId2 = _interopRequireDefault(_generateId);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  ARKit: {
    displayName: 'ARKit'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/Users/meloMacPro/Desktop/ar/rn-geometry/node_modules/react-native-arkit/ARKit.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var ARKitManager = _reactNative.NativeModules.ARKitManager;

var TRACKING_STATES = ['NOT_AVAILABLE', 'LIMITED', 'NORMAL'];

var TRACKING_REASONS = ['NONE', 'INITIALIZING', 'EXCESSIVE_MOTION', 'INSUFFICIENT_FEATURES'];
var TRACKING_STATES_COLOR = ['red', 'orange', 'green'];

var firstMount = false;

var ARKit = _wrapComponent('ARKit')(function (_Component) {
  _inherits(ARKit, _Component);

  function ARKit() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ARKit);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ARKit.__proto__ || Object.getPrototypeOf(ARKit)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      state: 0,
      reason: 0,
      floor: null
    }, _this._onTrackingState = function (_ref2) {
      var _ref2$state = _ref2.state,
          state = _ref2$state === undefined ? _this.state.state : _ref2$state,
          _ref2$reason = _ref2.reason,
          reason = _ref2$reason === undefined ? _this.state.reason : _ref2$reason,
          floor = _ref2.floor;

      if (_this.props.onTrackingState) {
        _this.props.onTrackingState({
          state: TRACKING_STATES[state] || state,
          reason: TRACKING_REASONS[reason] || reason,
          floor: floor
        });
      }

      if (_this.props.debug) {
        _this.setState({
          state: state,
          reason: reason,
          floor: floor ? floor.toFixed(2) : _this.state.floor
        });
      }
    }, _this._onEvent = function (event) {
      var eventName = event.nativeEvent.event;
      if (!eventName) {
        return;
      }
      eventName = eventName.charAt(0).toUpperCase() + eventName.slice(1);
      var eventListener = _this.props['on' + eventName];
      if (eventListener) {
        eventListener(event.nativeEvent);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ARKit, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      ARKitManager.resume();
      if (!firstMount) {
        ARKitManager.clearScene();
      } else {
        firstMount = true;
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      ARKitManager.pause();
    }
  }, {
    key: 'render',
    value: function render() {
      var AR = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RCTARKit;

      var state = null;
      if (this.props.debug) {
        state = _react3.default.createElement(
          _reactNative.View,
          { style: styles.statePanel, __source: {
              fileName: _jsxFileName,
              lineNumber: 61
            }
          },
          _react3.default.createElement(_reactNative.View, {
            style: [styles.stateIcon, { backgroundColor: TRACKING_STATES_COLOR[this.state.state] }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 62
            }
          }),
          _react3.default.createElement(
            _reactNative.Text,
            { style: styles.stateText, __source: {
                fileName: _jsxFileName,
                lineNumber: 68
              }
            },
            TRACKING_REASONS[this.state.reason] || this.state.reason,
            this.state.floor && ' (' + this.state.floor + ')'
          )
        );
      }
      return _react3.default.createElement(
        _reactNative.View,
        { style: this.props.style, __source: {
            fileName: _jsxFileName,
            lineNumber: 76
          }
        },
        _react3.default.createElement(AR, _extends({}, this.props, {
          onTapOnPlaneUsingExtent: this.callback('onTapOnPlaneUsingExtent'),
          onTapOnPlaneNoExtent: this.callback('onTapOnPlaneNoExtent'),
          onPlaneDetected: this.callback('onPlaneDetected'),
          onPlaneUpdate: this.callback('onPlaneUpdate'),
          onTrackingState: this.callback('onTrackingState'),
          onEvent: this._onEvent,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 77
          }
        })),
        state
      );
    }
  }, {
    key: 'callback',
    value: function callback(name) {
      var _this2 = this;

      return function (event) {
        if (_this2['_' + name]) {
          _this2['_' + name](event.nativeEvent);
          return;
        }
        if (!_this2.props[name]) {
          return;
        }
        _this2.props[name](event.nativeEvent);
      };
    }
  }]);

  return ARKit;
}(_react2.Component));

var styles = _reactNative.StyleSheet.create({
  statePanel: {
    position: 'absolute',
    top: 30,
    left: 10,
    height: 20,
    borderRadius: 10,
    padding: 4,
    backgroundColor: 'black',
    flexDirection: 'row'
  },
  stateIcon: {
    width: 12,
    height: 12,
    borderRadius: 6,
    marginRight: 4
  },
  stateText: {
    color: 'white',
    fontSize: 10,
    height: 12
  }
});

Object.keys(ARKitManager).forEach(function (key) {
  ARKit[key] = ARKitManager[key];
});

var addDefaultsToSnapShotFunc = function addDefaultsToSnapShotFunc(funcName) {
  return function (_ref3) {
    var _ref3$target = _ref3.target,
        target = _ref3$target === undefined ? 'cameraRoll' : _ref3$target,
        _ref3$format = _ref3.format,
        format = _ref3$format === undefined ? 'png' : _ref3$format;
    return ARKitManager[funcName]({ target: target, format: format });
  };
};

ARKit.snapshot = addDefaultsToSnapShotFunc('snapshot');
ARKit.snapshotCamera = addDefaultsToSnapShotFunc('snapshotCamera');

ARKit.exportModel = function (presetId) {
  var id = presetId || (0, _generateId2.default)();
  var property = { id: id };
  return ARKitManager.exportModel(property).then(function (result) {
    return _extends({}, result, { id: id });
  });
};

ARKit.propTypes = {
  debug: _propTypes2.default.bool,
  planeDetection: _propTypes2.default.bool,
  lightEstimationEnabled: _propTypes2.default.bool,
  autoenablesDefaultLighting: _propTypes2.default.bool,
  worldAlignment: _propTypes2.default.number,
  onPlaneDetected: _propTypes2.default.func,
  onFeaturesDetected: _propTypes2.default.func,

  onLightEstimation: _propTypes2.default.func,
  onPlaneUpdate: _propTypes2.default.func,
  onTrackingState: _propTypes2.default.func,
  onTapOnPlaneUsingExtent: _propTypes2.default.func,
  onTapOnPlaneNoExtent: _propTypes2.default.func,
  onEvent: _propTypes2.default.func
};

var RCTARKit = (0, _reactNative.requireNativeComponent)('RCTARKit', ARKit);

module.exports = ARKit;