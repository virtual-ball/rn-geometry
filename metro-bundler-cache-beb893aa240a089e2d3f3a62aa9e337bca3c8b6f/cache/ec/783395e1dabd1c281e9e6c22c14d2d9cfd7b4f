var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = '/Users/meloMacPro/Desktop/ar/rn-geometry/node_modules/react-native-blur/src/BlurView.ios.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  BlurView: {
    displayName: 'BlurView'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/Users/meloMacPro/Desktop/ar/rn-geometry/node_modules/react-native-blur/src/BlurView.ios.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var BlurView = _wrapComponent('BlurView')(function (_Component) {
  _inherits(BlurView, _Component);

  function BlurView() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, BlurView);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = BlurView.__proto__ || Object.getPrototypeOf(BlurView)).call.apply(_ref, [this].concat(args))), _this), _this.setNativeProps = function (nativeProps) {
      if (_this._root) {
        _this._root.setNativeProps(nativeProps);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(BlurView, [{
    key: 'render',
    value: function render() {
      return _react3.default.createElement(NativeBlurView, _extends({}, this.props, {
        style: [{ backgroundColor: 'transparent' }, this.props.style],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 14
        }
      }));
    }
  }]);

  return BlurView;
}(_react2.Component));

BlurView.propTypes = _extends({}, _reactNative.ViewPropTypes || _reactNative.View.propTypes, {
  blurType: _propTypes2.default.oneOf(['dark', 'light', 'xlight', 'prominent', 'regular', 'extraDark']),
  blurAmount: _propTypes2.default.number
});

BlurView.defaultProps = {
  blurType: 'dark',
  blurAmount: 10
};

var NativeBlurView = (0, _reactNative.requireNativeComponent)('BlurView', BlurView);

module.exports = BlurView;